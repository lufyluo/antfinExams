package com.antfin.exam.lazysingleton.util.extension;

import junit.framework.AssertionFailedError;
import junit.framework.TestCase;
import junit.framework.TestResult;

public class JUnitExtensions {
    public static class MultiThreadedTestCase extends TestCase {
        /**
         * The threads that are executing.
         */
        private Thread threads[] = null;
        /**
         * The tests TestResult.
         */
        private TestResult testResult = null;

        /**
         * Simple constructor.
         */

        public MultiThreadedTestCase(String s) {
            super(s);
        }

        /**
         * Interrupt the running threads.
         */
        public void interruptThreads() {
            if (threads != null) {
                for (int i = 0; i < threads.length; i++) {
                    threads[i].interrupt();
                }
            }
        }

        /**
         * Override run so we can squirrel away the test result.
         */

        public void run(final TestResult result) {
            testResult = result;
            super.run(result);
            testResult = null;
        }

        /**
         * Run the test case threads.
         */

        protected void runTestCaseRunnables(final TestCaseRunnable[] runnables) {
            if (runnables == null) {
                throw new IllegalArgumentException("runnables is null");
            }
            threads = new Thread[runnables.length];
            try {
                for (int i = 0; i < threads.length; i++) {
                    threads[i] = new Thread(runnables[i]);
                    threads[i].start();
                    threads[i].join();
                }
            } catch (InterruptedException ignore) {
                System.out.println("Thread join interrupted.");
            }
            threads = null;
        }

        /**
         * Handle an exception. Since multiple threads won't have their
         * exceptions caught the threads must manually catch them and call
         * <code>handleException ()</code>.
         *
         * @param t Exception to handle.
         */
        private void handleException(final Throwable t) {
            synchronized (testResult) {
                if (t instanceof AssertionFailedError) {
                    testResult.addFailure(this, (AssertionFailedError) t);
                } else {
                    testResult.addError(this, t);
                }
            }
        }

        // ======================================================================
        // inner class
        // ======================================================================

        /**
         * A test case thread. Override runTestCase () and define
         * behaviour of test in there.
         */
        protected abstract class TestCaseRunnable implements Runnable {
            /**
             * Override this to define the test
             */

            public abstract void runTestCase()
                    throws Throwable;

            /**
             * Run the test in an environment where
             * we can handle the exceptions generated by the test method.
             */

            public void run() {
                try {
                    runTestCase();
                } catch (Throwable t) /* Any other exception we handle and then we interrupt the other threads.*/ {
                    handleException(t);
                    interruptThreads();
                }
            }
        }
    }
}
